" Vundle bootstrap 
" Download vundle if it's not there
if !filereadable($HOME . '/.vim/bundle/Vundle.vim/.git/config') && confirm("Clone Vundle?","Y\nn") == 1
    exec '!git clone https://github.com/gmarik/Vundle.vim ~/.vim/bundle/Vundle.vim/'
endif

" ================================================
" Configs for Vundle
" ================================================
set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Themes
Plugin 'chriskempson/base16-vim'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'altercation/vim-colors-solarized'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'yasukotelin/shirotelin'

Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'mileszs/ack.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'terryma/vim-expand-region'
Plugin 'inkarkat/vim-ingo-library'
Plugin 'inkarkat/vim-mark'
Plugin 'dense-analysis/ale'
Plugin 'Chiel92/vim-autoformat'
Plugin 'michaeljsmith/vim-indent-object'
Plugin 'ludovicchabant/vim-gutentags'
Plugin 'tpope/vim-surround'

Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'takac/vim-hardtime'
Plugin 'kana/vim-textobj-user'

" Python specific
Plugin 'mgedmin/python-imports.vim'
"Plugin 'jeetsukumaran/vim-pythonsense'
Plugin 'bps/vim-textobj-python'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'davidhalter/jedi-vim'
Plugin 'jmcantrell/vim-virtualenv'


call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost vimrc source %

" make backspace behave like normal again
set bs=2     

let mapleader = " "

" Quick quit command
noremap <Leader>q :quit<CR>
noremap <Leader>Q :qa!<CR>

" Easier movement within windows
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
            
" Tab configs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Leave a little room on top and bottom of the screen when scrolling
set scrolloff=3

" Allow unsaved buffers to go to background
set hidden

" Use standard regex for searching (via '\V' option)
nnoremap / /\V
vnoremap / /\V

" Search configs
set hlsearch
set incsearch
set ignorecase
set smartcase
set gdefault

set autoindent
set number
set relativenumber

set nobackup
set laststatus=2
set wildmenu
set wildmode=longest:full,full

" Have a better :find experience
set path+=**
set wildignore+=*.pyc,*/__pycache__/*

" Open new splits on right or below
set splitbelow
set splitright

" netrw configs
let g:netrw_banner=0  " No help banner
let g:netrw_liststyle=3  " tree

" Ale configs
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters = {'python': ['flake8']}

" Airline configurations
" let g:airline#extensions#ale#enabled = 1
" let airline#extensions#ale#error_symbol = 'E:'
" let airline#extensions#ale#warning_symbol = 'W:'
let airline_section_b = ""

function! s:RunBlackMacchiato(visual) range
    if !executable("black-macchiato")
        echo "black-macchiato not found!"
        return
    endif

    if a:visual
        normal! gv
    endif

    let currentMode = mode()

    if currentMode ==# "n"
        silent execute ".!black-macchiato"
    elseif currentMode ==# "v" || currentMode ==# "V"
        silent execute "'<,'>!black-macchiato"
    endif

    echo "Done formatting."

endfunction

" Call black-macchiato
augroup Python
    autocmd!
    autocmd FileType python xnoremap <Leader>f :call <sid>RunBlackMacchiato(1)<cr>
    autocmd FileType python nnoremap <Leader>f :call <sid>RunBlackMacchiato(0)<cr>
augroup END

let g:formatters_python = ['black', 'yapf', 'autopep8']
" Use `ag` for ack plugin
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" clean the search result by hitting space
nnoremap <silent> <leader><space> :noh<cr>

" open vimrc fast!
:nnoremap <leader>ev :vsplit $MYVIMRC<cr>
:nnoremap <leader>sv :source $MYVIMRC<cr>

" Use space for code folding
set foldmethod=indent
set foldlevel=99

" Shorter update time (for git gutter)
set updatetime=100

" No docstring window for Jedi
autocmd FileType python setlocal completeopt-=preview

" Use macos clipboard
set clipboard=unnamed

" Disable the welcome message
set shortmess+=I 

" Turn off the annoying bells
set belloff=all

" NERDTree configs
let NERDTreeIgnore = ['__pycache__']
let NERDTreeRespectWildIgnore=1
map <f8> :NERDTreeToggle<CR>


" HardTime configs
let g:hardtime_default_on = 0
let g:hardtime_timeout = 1000
let g:hardtime_showmsg = 0

if has('gui_running')
    set background=light
    colorscheme base16-one-light
    let g:airline_theme='base16'
    set guifont=Menlo\ Regular:h12
    set linespace=2

    " Remove the scrollbars. Also use console dialogs.
    set guioptions=c

    " Highlight current line
    set cursorline
else
  "  colorscheme zenburn
end

" Configs for showing invisible chars (tab etc)
nmap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬  " Same as TextMate

augroup MyGroup
    autocmd!
    autocmd FocusLost * silent! wa

    " Python specific
    autocmd FileType python map <silent> <buffer>
                \ <leader>pb oimport pdb; pdb.set_trace()<esc>

augroup END

" Do an :ls and go for a buffer switch!
nnoremap <leader>b :ls<cr>:b
