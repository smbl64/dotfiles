call plug#begin('~/.vim/plugged')

" Themes
Plug 'chriskempson/base16-vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'altercation/vim-colors-solarized'
Plug 'yasukotelin/shirotelin'

" Markdown
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'

" GUI enhancements
Plug 'machakann/vim-highlightedyank'

" Fuzzy finder
"Plug 'airblade/vim-rooter'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'mileszs/ack.vim'
"Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'terryma/vim-expand-region'
Plug 'inkarkat/vim-ingo-library'
Plug 'inkarkat/vim-mark'
Plug 'dense-analysis/ale'
Plug 'Chiel92/vim-autoformat'
Plug 'michaeljsmith/vim-indent-object'
Plug 'ludovicchabant/vim-gutentags'
Plug 'tpope/vim-surround'
Plug 'hashivim/vim-terraform'

Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'kana/vim-textobj-user'

" Plug 'easymotion/vim-easymotion'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Python specific
Plug 'bps/vim-textobj-python'
Plug 'tmhedberg/SimpylFold'
Plug 'vim-scripts/indentpython.vim'
Plug 'smbl64/vim-black-macchiato'

Plug 'rust-lang/rust.vim'
Plug 'mrk21/yaml-vim'

" Snippet engine
"Plug 'SirVer/ultisnips'
"Plug 'honza/vim-snippets'

" Web development
Plug 'pangloss/vim-javascript'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'hail2u/vim-css3-syntax'

" Golang
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

Plug 'rodjek/vim-puppet'

" Lox
Plug 'timmyjose-projects/lox.vim'

" Dart
Plug 'dart-lang/dart-vim-plugin'

" Zig
Plug 'ziglang/zig.vim'

call plug#end()

" More matching with %
runtime macros/matchit.vim

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost vimrc source %

" Disable swap files
set noswapfile

" make backspace behave like normal again
set bs=2

let mapleader = " "

" Disable arrow keys
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
vnoremap <Up> <Nop>
vnoremap <Down> <Nop>
vnoremap <Left> <Nop>
vnoremap <Right> <Nop>

" Easier movement within windows
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" Disable Ctrl-P in Insert mode, because I often hit it
" while I wanna reach for Ctrl-[
"imap <c-p> <Nop>

" Tab configs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Leave a little room on top and bottom of the screen when scrolling
set scrolloff=3

" Allow unsaved buffers to go to background
set hidden

" Use standard regex for searching (via '\V' option)
nnoremap / /\V
vnoremap / /\V

" Search configs
set hlsearch
set incsearch
set ignorecase
set smartcase

set autoindent
set number
set cursorline

set nobackup
set laststatus=2
set wildmenu
set wildmode=longest:full,full

" Have a better :find experience
set path+=**
set wildignore+=*.pyc,*/__pycache__/*

" Open new splits on right or below
set splitbelow
set splitright

" Automatically re-read the file if it's changed
set autoread

" Better timeouts
set ttimeout
set ttimeoutlen=100
set timeoutlen=1000

" netrw configs
let g:netrw_banner=0  " No help banner
let g:netrw_liststyle=3  " tree

" UltiSnip configs
let g:UltiSnipsExpandTrigger="<s-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" vim-go configs
let g:go_template_autocreate = 0
let g:go_def_mapping_enabled = 0
let g:go_fmt_command = "gopls"
let g:go_imports_mode = 'gopls'
let g:go_gopls_gofumpt = 1
let g:go_doc_keywordprg_enabled = 0  " Disable K keybinding (GoDoc)


" Rust configs
let g:rustfmt_autosave = 1

" Ale configs
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = 'ale: [%linter%] [%severity%] %s'

" ALE linters. Rust linters are disabled, because they interfere with CoC's analysis.
" This is what was there before:
" \ 'rust': ['analyzer', 'cargo', 'rls', 'rustc']
let g:ale_linters = {
            \ 'python': ['flake8'],
            \ 'rust': [],
            \ }
let g:ale_linters_ignore = {'rust': ['rls', 'rustc']}



" COC extensions
let g:coc_global_extensions = [
    \ 'coc-flutter',
    \ 'coc-json',
    \ 'coc-pyright',
    \ 'coc-rust-analyzer',
    \ 'coc-tsserver',
    \ 'coc-vimlsp',
    \ 'coc-yaml',
    \ 'coc-zig'
    \ ]

" ------------------------
"  COC Configs
"  Copied from its README
" ------------------------
" Always show the signcolumn, otherwise it would shift the text each time diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

" Use <CR> to confirm completion
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#_select_confirm() : "\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Keyboard shortcuts
" Example: <leader>aap for current paragraph, <leader>aw for the current word
xmap <Leader>a <Plug>(coc-codeaction-selected)
nmap <Leader>a <Plug>(coc-codeaction-selected)
nmap <Leader>d <Plug>(coc-definition)
nmap <Leader>r <Plug>(coc-rename)

" ------------------------
"  End of COC Configs
" ------------------------

augroup CustomKeyboardShortcuts
    autocmd!
    autocmd FileType python xmap <buffer> <Leader>f <plug>(BlackMacchiatoSelection)
    autocmd FileType python nmap <buffer> <Leader>f <plug>(BlackMacchiatoCurrentLine)

    autocmd FileType perl xmap <buffer> <Leader>f <plug>(PerlTidySelection)
    autocmd FileType perl nmap <buffer> <Leader>f <plug>(PerlTidyCurrentLine)


    autocmd FileType xml nnoremap <buffer> <Leader>f :%!xmllint --format %<cr>
    autocmd FileType sql nnoremap <buffer> <Leader>f :%!sqlformat --reindent --keywords upper --identifiers lower -<cr>
augroup END

let g:formatters_python = ['black', 'yapf', 'autopep8']
"
" Use 'ripgrep' or 'ag' for ack plugin
" Both are configured to check for literal strings (so, no regex)
if executable('rg')
  let g:ackprg = 'rg --fixed-strings --vimgrep --hidden --glob "!.git/"'
elseif executable('ag')
  let g:ackprg = 'ag --literal --vimgrep'
endif

" Trim the whitespace
" https://vi.stackexchange.com/a/456/25216
fun! TrimTrailingSpaces()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

command! TrimTrailingSpaces call TrimTrailingSpaces()

" Easily quit buffers
nnoremap <Leader>q :q<cr>

" Ack the current word
noremap <Leader>s :execute('Ack! ' . expand('<cword>'))<cr>

" Read help for the word under the cursor (vim files)
augroup VimFiles
    autocmd!
    autocmd FileType vim nnoremap <buffer> <Leader>h :execute "help " . expand("<cword>")<cr>
augroup END

" clean the search result by hitting space
nnoremap <silent> <leader><space> :noh<cr>

" open vimrc fast!
:nnoremap <leader>ev :vsplit $MYVIMRC<cr>
:nnoremap <leader>sv :source $MYVIMRC<cr>

" Use space for code folding
set foldmethod=indent
set foldlevel=99

" Shorter update time (for git gutter)
set updatetime=300

" No docstring window for python and go
autocmd FileType python,go setlocal completeopt-=preview

" Use OS clipboard
if has('macunix')
    set clipboard=unnamed
else
    set clipboard=unnamedplus
endif

" Disable the welcome message
set shortmess+=I

" Turn off the annoying bells
set belloff=all

" Permanent undo
set undodir=~/.vim/undo-dir
set undofile

" NERDTree configs
"let NERDTreeIgnore = ['__pycache__']
"let NERDTreeRespectWildIgnore=1
"map <f8> :NERDTreeToggle<CR>

if has('gui_running')
    set background=light
    colorscheme PaperColor
    set guifont=Menlo\ Regular:h12
    set linespace=2

    " Remove the scrollbars. Also use console dialogs.
    set guioptions=c
else
    set termguicolors
    set background=dark
    colorscheme base16-gruvbox-dark-hard
end

" Configs for showing invisible chars (tab etc)
nmap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬,space:␣

augroup MyGroup
    autocmd!
    autocmd FocusLost * silent! wa

    " Python specific
    autocmd FileType python map <silent> <buffer>
                \ <leader>pb oimport pdb; pdb.set_trace()<esc>

augroup END

" Show list of all files or buffers using fzf
nnoremap <leader>b :Buffers<CR>
nnoremap <C-p> :Files<CR>

" Disable the preview window in Files command
"let g:fzf_preview_window = ''

" Expand %% to current directory (in Ex command mode)
cabbr <expr> %% expand('%:p:h')

" Abbreviation for vertical split find
cabbrev vsf vert sfind


" Color scheme switching
function! SwitchColorScheme()
    if (g:colors_name ==# "base16-gruvbox-light-hard")
        colorscheme base16-gruvbox-dark-hard
    else
        colorscheme base16-gruvbox-light-hard
    endif
endfunction

function! SwitchBackground()
    if (&background ==# "light")
        set background=dark
    else
        set background=light
    endif
endfunction

if has('gui_running')
    nnoremap <F9> :call SwitchBackground()<CR>
endif

augroup CustomFileTypes
    autocmd!
    autocmd BufNewFile,BufRead *.xml.j2 set filetype=xml

    " add yaml stuffs
    au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

    " A hack to navigate yaml files with [[ and ]]
    autocmd FileType yaml nnoremap <buffer> ]] /^\S<cr>:nohl<cr>
    autocmd FileType yaml nnoremap <buffer> [[ ?^\S<cr>:nohl<cr>
augroup END

" Make active window more visible
augroup BgHighlight
    autocmd!
    autocmd WinEnter * set cursorline
    autocmd WinLeave * set nocursorline
augroup END

" Automatically create folders on write if needed
augroup Mkdir
  autocmd!
  autocmd BufWritePre * call mkdir(expand("<afile>:p:h"), "p")
augroup END

" Open a scratch new tab
command! Scratch tabnew | setlocal buftype=nofile | file Scratch

set statusline=
set statusline+=%#CursorIM#%{(mode()=='n')?'\ \ NORMAL\ ':''}
set statusline+=%#Search#%{(mode()=='i')?'\ \ INSERT\ ':''}
set statusline+=%#DiffDelete#%{(mode()=='r')?'\ \ RPLACE\ ':''}
set statusline+=%#Cursor#%{(mode()=='v')?'\ \ VISUAL\ ':''}
set statusline+=%#Visual#       " colour
set statusline+=%{&paste?'\ PASTE\ ':''}
set statusline+=%{&spell?'\ SPELL\ ':''}
set statusline+=%#CursorIM#     " colour
set statusline+=%R                        " readonly flag
set statusline+=%M                        " modified [+] flag
set statusline+=%#CursorLine#     " colour
set statusline+=\ %f\                   " short file name
set statusline+=%=                          " right align
set statusline+=%#CursorLine#   " colour
set statusline+=\ %y\                   " file type
set statusline+=%#CursorIM#     " colour
set statusline+=\ %3l:%-2c\         " line + column
set statusline+=%#CursorIM#       " colour
set statusline+=\ %3p%%\                " percentage


" Check for local vimrc
let local_vimrc = expand('~/.vimrc_local')

if filereadable(local_vimrc)
    exec 'source' local_vimrc
endif
