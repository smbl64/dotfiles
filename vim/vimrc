" Python configuration
set pythonhome=$HOME/.pyenv/versions/2.7.16
set pythondll=$HOME/.pyenv/versions/2.7.16/lib/libpython2.7.dylib
set pythonthreehome=$HOME/.pyenv/versions/3.7.3
set pythonthreedll=$HOME/.pyenv/versions/3.7.3/lib/libpython3.7m.dylib

call plug#begin('~/.vim/plugged')

" Themes
Plug 'chriskempson/base16-vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'altercation/vim-colors-solarized'
Plug 'yasukotelin/shirotelin'

" GUI enhancements
Plug 'machakann/vim-highlightedyank'

" Fuzzy finder
"Plug 'airblade/vim-rooter'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'mileszs/ack.vim'
"Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'terryma/vim-expand-region'
Plug 'inkarkat/vim-ingo-library'
Plug 'inkarkat/vim-mark'
Plug 'dense-analysis/ale'
Plug 'Chiel92/vim-autoformat'
Plug 'michaeljsmith/vim-indent-object'
Plug 'ludovicchabant/vim-gutentags'
Plug 'tpope/vim-surround'

Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'kana/vim-textobj-user'

Plug 'ycm-core/YouCompleteMe'

" Python specific
Plug 'mgedmin/python-imports.vim'
" Plug 'jeetsukumaran/vim-pythonsense'
Plug 'bps/vim-textobj-python'
Plug 'tmhedberg/SimpylFold'
Plug 'vim-scripts/indentpython.vim'
" Plug 'davidhalter/jedi-vim'
Plug 'jmcantrell/vim-virtualenv'

Plug 'rust-lang/rust.vim'
Plug 'mrk21/yaml-vim'

" Snippet engine
"Plug 'SirVer/ultisnips'
"Plug 'honza/vim-snippets'

" Web development
Plug 'pangloss/vim-javascript'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'hail2u/vim-css3-syntax'

" Golang
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

call plug#end()

" More matching with %
runtime macros/matchit.vim

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost vimrc source %

" Disable swap files
set noswapfile

" make backspace behave like normal again
set bs=2

let mapleader = " "

" Disable arrow keys
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
vnoremap <Up> <Nop>
vnoremap <Down> <Nop>
vnoremap <Left> <Nop>
vnoremap <Right> <Nop>

" Easier movement within windows
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" Tab configs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Leave a little room on top and bottom of the screen when scrolling
set scrolloff=3

" Allow unsaved buffers to go to background
set hidden

" Use standard regex for searching (via '\V' option)
nnoremap / /\V
vnoremap / /\V

" Search configs
set hlsearch
set incsearch
set ignorecase
set smartcase

set autoindent
set number
set relativenumber

set nobackup
set laststatus=2
set wildmenu
set wildmode=longest:full,full

" Have a better :find experience
set path+=**
set wildignore+=*.pyc,*/__pycache__/*

" Open new splits on right or below
set splitbelow
set splitright

" netrw configs
let g:netrw_banner=0  " No help banner
let g:netrw_liststyle=3  " tree

" UltiSnip configs
let g:UltiSnipsExpandTrigger="<s-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" vim-go configs
let g:go_template_autocreate = 0

" Ale configs
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters = {'python': ['flake8']}

let g:ycm_auto_hover=''

function! s:RunBlackMacchiato() range
    let cmd = "black-macchiato"
    if !executable(cmd)
        echohl ErrorMsg
        echom "black-macchiato not found!"
        echohl None
        return
    endif

    silent execute a:firstline . "," . a:lastline . "!" . cmd

    echo "Done formatting."

endfunction

" Create a command to call the black-macchiato function
command -range BlackMacchiato <line1>,<line2>call <sid>RunBlackMacchiato()
augroup CustomKeyboardShortcuts
    autocmd!
    autocmd FileType python xnoremap <buffer> <Leader>f :'<,'>BlackMacchiato<cr>
    autocmd FileType python nnoremap <buffer> <Leader>f :BlackMacchiato<cr>
    autocmd FileType python,go,rust nnoremap <Leader>d :YcmCompleter GoTo<cr>
    autocmd FileType python,go,rust nnoremap <Leader>n :YcmCompleter GoToReferences<cr>

    autocmd FileType xml nnoremap <Leader>f :%!xmllint --format %<cr>
    autocmd FileType sql nnoremap <Leader>f :%!sqlformat --reindent --keywords upper --identifiers lower -<cr>
augroup END

let g:formatters_python = ['black', 'yapf', 'autopep8']
"
" Use 'ripgrep' or 'ag' for ack plugin
" Both are configured to check for literal strings (so, no regex)
if executable('rg')
  let g:ackprg = 'rg --fixed-strings --vimgrep'
elseif executable('ag')
  let g:ackprg = 'ag --literal --vimgrep'
endif

" Trim the whitespace
" https://vi.stackexchange.com/a/456/25216
fun! TrimTrailingSpaces()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

command! TrimTrailingSpaces call TrimTrailingSpaces()

" Easily quit buffers
nnoremap <Leader>q :q<cr>

" Ack the current word
noremap <Leader>a :Ack! <cword><cr>

" Read help for the word under the cursor (vim files)
augroup VimFiles
    autocmd!
    autocmd FileType vim nnoremap <buffer> <Leader>h :execute "help " . expand("<cword>")<cr>
augroup END

" clean the search result by hitting space
nnoremap <silent> <leader><space> :noh<cr>

" open vimrc fast!
:nnoremap <leader>ev :vsplit $MYVIMRC<cr>
:nnoremap <leader>sv :source $MYVIMRC<cr>

" Use space for code folding
set foldmethod=indent
set foldlevel=99

" Shorter update time (for git gutter)
set updatetime=800

" No docstring window for python and go
autocmd FileType python,go setlocal completeopt-=preview

" Use macos clipboard
set clipboard=unnamed

" Disable the welcome message
set shortmess+=I

" Turn off the annoying bells
set belloff=all

" Permanent undo
set undodir=~/.vim/undo-dir
set undofile

" NERDTree configs
"let NERDTreeIgnore = ['__pycache__']
"let NERDTreeRespectWildIgnore=1
"map <f8> :NERDTreeToggle<CR>

if has('gui_running')
    set background=light
    colorscheme base16-one-light
    set guifont=Menlo\ Regular:h12
    set linespace=2

    " Remove the scrollbars. Also use console dialogs.
    set guioptions=c
else
  "  colorscheme zenburn
end

" Configs for showing invisible chars (tab etc)
nmap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬  " Same as TextMate

augroup MyGroup
    autocmd!
    autocmd FocusLost * silent! wa

    " Python specific
    autocmd FileType python map <silent> <buffer>
                \ <leader>pb oimport pdb; pdb.set_trace()<esc>

augroup END

" Show list of all files or buffers using fzf
nnoremap <leader>b :Buffers<CR>
nnoremap <C-p> :Files<CR>

" Disable the preview window in Files command
let g:fzf_preview_window = ''

" Expand %% to current directory (in Ex command mode)
cabbr <expr> %% expand('%:p:h')

" Abbreviation for vertical split find
cabbrev vsf vert sfind


" Color scheme switching
function! SwitchColorScheme()
    if (g:colors_name ==# "base16-one-light")
        colorscheme base16-onedark
    else
        colorscheme base16-one-light
    endif
endfunction


if has('gui_running')
    nnoremap <F9> :call SwitchColorScheme()<CR>
endif

augroup CustomFileTypes
    autocmd!
    autocmd BufNewFile,BufRead *.xml.j2 set filetype=xml

    " add yaml stuffs
    au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
augroup END

" Make active window more visible
if has('gui_running')
    augroup BgHighlight
        autocmd!
        autocmd WinEnter * set cursorline relativenumber
        autocmd WinLeave * set nocursorline norelativenumber
    augroup END
endif

set statusline=
set statusline+=%#CursorIM#%{(mode()=='n')?'\ \ NORMAL\ ':''}
set statusline+=%#Search#%{(mode()=='i')?'\ \ INSERT\ ':''}
set statusline+=%#DiffDelete#%{(mode()=='r')?'\ \ RPLACE\ ':''}
set statusline+=%#Cursor#%{(mode()=='v')?'\ \ VISUAL\ ':''}
set statusline+=%#Visual#       " colour
set statusline+=%{&paste?'\ PASTE\ ':''}
set statusline+=%{&spell?'\ SPELL\ ':''}
set statusline+=%#CursorIM#     " colour
set statusline+=%R                        " readonly flag
set statusline+=%M                        " modified [+] flag
set statusline+=%#CursorLine#     " colour
set statusline+=\ %f\                   " short file name
set statusline+=%=                          " right align
set statusline+=%#CursorLine#   " colour
set statusline+=\ %y\                   " file type
set statusline+=%#CursorIM#     " colour
set statusline+=\ %3l:%-2c\         " line + column
set statusline+=%#CursorIM#       " colour
set statusline+=\ %3p%%\                " percentage
